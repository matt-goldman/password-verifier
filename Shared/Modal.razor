<div class="modal @ModalClass" tabindex="-1" role="dialog" style="display:@ModalDisplay;">
    <div class="@_modalClass" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" style="color:yellow; font-family:sans-serif;">@Title</h5>
                <button class="btn" aria-label="Close" @onclick="CloseModal">
                  <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                @ModalContent
            </div>
            @if (ShowCloseButton)
            {
                <div class="modal-footer">
                    <button class="btn btn-primary" @onclick="CloseModal">@CloseButtonText</button>
                </div>
            }
        </div>
    </div>
</div>


@if (ShowBackdrop)
{
    <div class="modal-backdrop fade show"></div>
}


@code {

    [Parameter]
    public string Title { get; set; }

    [Parameter]
    public RenderFragment ModalContent { get; set; }

    [Parameter]
    public bool ShowCloseButton { get; set; } = false;

    [Parameter]
    public bool IsLarge { get; set; } = false;
    
    [Parameter]
    public string CloseButtonText { get; set; }

    public string ModalDisplay = "none;";
    public string ModalClass = "";
    public bool ShowBackdrop = false;

    private string _modalClass => IsLarge ? "modal-dialog modal-lg" : "modal-dialog";

    public async Task OpenModal()
    {
        ModalDisplay = "block;";
        ShowBackdrop = true;
        await Task.Delay(100);
        ModalClass = "show";
        StateHasChanged();
    }

    public async Task CloseModal()
    {
        ModalClass = "";
        ShowBackdrop = false;
        await Task.Delay(250);
        ModalDisplay = "none;";
        StateHasChanged();
    }
}